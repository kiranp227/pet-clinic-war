pipeline {
    agent any

    options {
        timeout(time: 30, unit: 'MINUTES') // Set timeout for the entire pipeline
    }

    environment {
        DOCKER_IMAGE = "your-docker-repo/java-app"
        K8S_NAMESPACE = "your-namespace"
        SONAR_URL = "http://your-sonarqube-server"
        SONAR_TOKEN = credentials('sonar-token')
        KUBE_CONFIG = credentials('k8s-config') // Store kubeconfig in Jenkins credentials
    }

    stages {

        stage('Checkout Code') {
            steps {
                script {
                    try {
                        git branch: 'main', url: 'https://github.com/your-repo/java-app.git'
                    } catch (Exception e) {
                        echo "Error during checkout: ${e}"
                        currentBuild.result = 'FAILURE'
                        error("Checkout failed!")
                    }
                }
            }
        }

        stage('Validation & Security Checks') {
            parallel {
                stage('Pre-commit Validation') {
                    steps {
                        script {
                            try {
                                sh 'mvn checkstyle:check' // Java linting
                                sh 'mvn test' // Run Unit Tests
                            } catch (Exception e) {
                                echo "Pre-commit validation failed: ${e}"
                                currentBuild.result = 'FAILURE'
                                error("Pre-commit validation failed!")
                            }
                        }
                    }
                }

                stage('Static Code Analysis (SonarQube)') {
                    steps {
                        script {
                            try {
                                sh """
                                mvn sonar:sonar \
                                    -Dsonar.projectKey=java-app \
                                    -Dsonar.host.url=$SONAR_URL \
                                    -Dsonar.login=$SONAR_TOKEN
                                """
                            } catch (Exception e) {
                                echo "SonarQube analysis failed: ${e}"
                                currentBuild.result = 'FAILURE'
                                error("SonarQube analysis failed!")
                            }
                        }
                    }
                }

                stage('Dependency Scanning (OWASP)') {
                    steps {
                        script {
                            try {
                                sh 'mvn org.owasp:dependency-check-maven:check'
                            } catch (Exception e) {
                                echo "Dependency scanning failed: ${e}"
                                currentBuild.result = 'FAILURE'
                                error("Dependency scanning failed!")
                            }
                        }
                    }
                }
            }
        }

        stage('SonarQube Quality Gate') {
            steps {
                script {
                    try {
                        timeout(time: 3, unit: 'MINUTES') {
                            waitForQualityGate abortPipeline: true
                        }
                    } catch (Exception e) {
                        echo "SonarQube Quality Gate failed: ${e}"
                        currentBuild.result = 'FAILURE'
                        error("SonarQube Quality Gate failed!")
                    }
                }
            }
        }

        stage('Build & Containerization') {
            parallel {
                stage('Build & Package') {
                    steps {
                        script {
                            try {
                                sh 'mvn clean package -DskipTests'
                            } catch (Exception e) {
                                echo "Build failed: ${e}"
                                currentBuild.result = 'FAILURE'
                                error("Build failed!")
                            }
                        }
                    }
                }

                stage('Container Build & Push') {
                    steps {
                        script {
                            try {
                                withDockerRegistry([credentialsId: 'docker-hub-credentials', url: 'https://index.docker.io/v1/']) {
                                    sh """
                                    docker build -t $DOCKER_IMAGE:latest .
                                    docker push $DOCKER_IMAGE:latest
                                    """
                                }
                            } catch (Exception e) {
                                echo "Docker build/push failed: ${e}"
                                currentBuild.result = 'FAILURE'
                                error("Docker build or push failed!")
                            }
                        }
                    }
                }
            }
        }

        stage('Docker Image Security Scan (Trivy)') {
            steps {
                script {
                    try {
                        sh """
                        trivy image --exit-code 1 --severity HIGH,CRITICAL $DOCKER_IMAGE:latest
                        """
                    } catch (Exception e) {
                        echo "Trivy scan failed: ${e}"
                        currentBuild.result = 'FAILURE'
                        error("Docker image security scan failed!")
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    try {
                        withKubeConfig([credentialsId: 'k8s-config']) {
                            sh """
                            kubectl apply -f k8s/deployment.yaml -n $K8S_NAMESPACE
                            kubectl rollout status deployment/java-app -n $K8S_NAMESPACE
                            """
                        }
                    } catch (Exception e) {
                        echo "Deployment to Kubernetes failed: ${e}"
                        currentBuild.result = 'FAILURE'
                        error("Kubernetes deployment failed!")
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Deployment successful!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
